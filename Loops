// examples of for, while and do ... while in Kotlin

package examples 

import kotlin.test.assertEquals
import org.junit.Test as test

fun main() {
    testLoops()
}

@test fun testLoops() {
    var expected = "[[0], [1, 2], [3, 4, 5]] [[0], [1, 2], [3, 4, 5]] [[0], [1, 2], [3, 4, 5]] [[0], [1, 2], [3, 4, 5]]"
    var returned = Loops()
    try {
        assertEquals(expected, returned, "FAIL Loops()")
        println("PASS Loops()")
    } catch (e: AssertionError) {
        println("${e}")
    }
}

fun Loops(): String {
    var r = ""
    val a = arrayOf(intArrayOf(0), intArrayOf(1, 2), intArrayOf(3, 4, 5))
    
    r += "["
    for(v in a) {
        r += "["
        for(u in v) {
            r += "${u}, "
        }
        r = "${r.subSequence(0..r.length - 3)}], "
    }
    r = "${r.subSequence(0..r.length - 3)}] "
    
    r += "["
    for(k in a.indices) {
        r += "["
        for(j in a[k].indices) {
            r += "${a[k][j]}, "
        }
        r = "${r.subSequence(0..r.length - 3)}], "
    }
    r = "${r.subSequence(0..r.length - 3)}] "
    
    r += "["
    for((_, v) in a.withIndex()) {
        r += "["
        for((j, _) in v.withIndex()) {
            r += "${v[j]}, "
        }
        r = "${r.subSequence(0..r.length - 3)}], "
    }
    r = "${r.subSequence(0..r.length - 3)}] "
    
    var k: Iterator<IntArray>
    var v: IntArray
    var j: Iterator<Int>
    var u: Int
    
    r += "["
    k = a.iterator()
    while(k.hasNext()) {
        r += "["
        v = k.next()
        j = v.iterator()
        while(j.hasNext()) {
            u = j.next()
            r += "${u}, "
        }
        r = "${r.subSequence(0..r.length - 3)}], "
    }
    r = "${r.subSequence(0..r.length - 3)}]"
    
    return r
}
